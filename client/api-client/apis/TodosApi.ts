/* tslint:disable */
/* eslint-disable */
/**
 * Todos API
 * The todos API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTodoDto,
  ITodoApiResponse,
  UpdateTodoDto,
} from '../models';
import {
    CreateTodoDtoFromJSON,
    CreateTodoDtoToJSON,
    ITodoApiResponseFromJSON,
    ITodoApiResponseToJSON,
    UpdateTodoDtoFromJSON,
    UpdateTodoDtoToJSON,
} from '../models';

export interface TodosControllerCreateRequest {
    createTodoDto: CreateTodoDto;
}

export interface TodosControllerFindOneRequest {
    id: string;
}

export interface TodosControllerRemoveRequest {
    id: string;
}

export interface TodosControllerUpdateRequest {
    id: string;
    updateTodoDto: UpdateTodoDto;
}

/**
 * 
 */
export class TodosApi extends runtime.BaseAPI {

    /**
     * Create todo
     */
    async todosControllerCreateRaw(requestParameters: TodosControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ITodoApiResponse>> {
        if (requestParameters.createTodoDto === null || requestParameters.createTodoDto === undefined) {
            throw new runtime.RequiredError('createTodoDto','Required parameter requestParameters.createTodoDto was null or undefined when calling todosControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/todos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTodoDtoToJSON(requestParameters.createTodoDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ITodoApiResponseFromJSON(jsonValue));
    }

    /**
     * Create todo
     */
    async todosControllerCreate(requestParameters: TodosControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ITodoApiResponse> {
        const response = await this.todosControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all todos
     */
    async todosControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ITodoApiResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/todos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ITodoApiResponseFromJSON));
    }

    /**
     * List all todos
     */
    async todosControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ITodoApiResponse>> {
        const response = await this.todosControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get todo by id
     */
    async todosControllerFindOneRaw(requestParameters: TodosControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ITodoApiResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling todosControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ITodoApiResponseFromJSON(jsonValue));
    }

    /**
     * Get todo by id
     */
    async todosControllerFindOne(requestParameters: TodosControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ITodoApiResponse> {
        const response = await this.todosControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete todo by id
     */
    async todosControllerRemoveRaw(requestParameters: TodosControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling todosControllerRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete todo by id
     */
    async todosControllerRemove(requestParameters: TodosControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.todosControllerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update todo by id
     */
    async todosControllerUpdateRaw(requestParameters: TodosControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ITodoApiResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling todosControllerUpdate.');
        }

        if (requestParameters.updateTodoDto === null || requestParameters.updateTodoDto === undefined) {
            throw new runtime.RequiredError('updateTodoDto','Required parameter requestParameters.updateTodoDto was null or undefined when calling todosControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/todos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTodoDtoToJSON(requestParameters.updateTodoDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ITodoApiResponseFromJSON(jsonValue));
    }

    /**
     * Update todo by id
     */
    async todosControllerUpdate(requestParameters: TodosControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ITodoApiResponse> {
        const response = await this.todosControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
